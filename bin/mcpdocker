#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

// Find the project root directory (where main.py is located)
function findProjectRoot() {
    let currentDir = __dirname;
    while (currentDir !== '/') {
        const parentDir = path.dirname(currentDir);
        if (fs.existsSync(path.join(parentDir, 'main.py'))) {
            return parentDir;
        }
        currentDir = parentDir;
    }
    throw new Error('Could not find main.py - ensure mcpdocker is properly installed');
}

async function main() {
    try {
        const projectRoot = findProjectRoot();
        const mainPyPath = path.join(projectRoot, 'main.py');
        
        // Check if main.py exists
        if (!fs.existsSync(mainPyPath)) {
            console.error('Error: main.py not found at', mainPyPath);
            process.exit(1);
        }
        
        // Check if Python is available
        const pythonCommands = ['python3', 'python'];
        let pythonCmd = null;
        
        for (const cmd of pythonCommands) {
            try {
                const testProcess = spawn(cmd, ['--version'], { stdio: 'pipe' });
                await new Promise((resolve, reject) => {
                    testProcess.on('close', (code) => {
                        if (code === 0) {
                            pythonCmd = cmd;
                            resolve();
                        } else {
                            reject();
                        }
                    });
                    testProcess.on('error', reject);
                });
                break;
            } catch (e) {
                continue;
            }
        }
        
        if (!pythonCmd) {
            console.error('Error: Python not found. Please install Python 3.11 or higher.');
            process.exit(1);
        }
        
        // Check if dependencies are installed
        const requirementsPath = path.join(projectRoot, 'requirements.txt');
        if (fs.existsSync(requirementsPath)) {
            console.log('Installing Python dependencies...');
            const installProcess = spawn(pythonCmd, ['-m', 'pip', 'install', '-r', requirementsPath], {
                cwd: projectRoot,
                stdio: 'inherit'
            });
            
            await new Promise((resolve, reject) => {
                installProcess.on('close', (code) => {
                    if (code === 0) {
                        resolve();
                    } else {
                        console.error('Failed to install dependencies');
                        reject(new Error(`pip install failed with code ${code}`));
                    }
                });
            });
        }
        
        // Run the Python MCP server with passed arguments
        const args = process.argv.slice(2);
        const pythonProcess = spawn(pythonCmd, [mainPyPath, ...args], {
            cwd: projectRoot,
            stdio: 'inherit'
        });
        
        pythonProcess.on('close', (code) => {
            process.exit(code);
        });
        
        pythonProcess.on('error', (error) => {
            console.error('Error running mcpdocker:', error.message);
            process.exit(1);
        });
        
        // Handle SIGTERM and SIGINT
        process.on('SIGTERM', () => pythonProcess.kill('SIGTERM'));
        process.on('SIGINT', () => pythonProcess.kill('SIGINT'));
        
    } catch (error) {
        console.error('Error:', error.message);
        process.exit(1);
    }
}

main().catch((error) => {
    console.error('Unexpected error:', error.message);
    process.exit(1);
});